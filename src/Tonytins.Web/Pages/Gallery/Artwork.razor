@page "/gallery/{Database}/{Key}"
@using Tonytins.Models
@using Tonytins.Web.Components
@inject HttpClient Http
@inject Blazored.LocalStorage.ISyncLocalStorageService localStorage
<AlertComponent Display=@DisplayAlert Alert=@AlertType.Warning Message=@AlertMessage />
@if (isReady)
{
<h2>@GalleryTitle</h2>
                <hr />
                                <div class="row justify-content-lg-center">
                                    <div class="col"></div>
                                    <div class="col-lg">
                                        <img src=@SiteHelper.ImageCDN(Image, $@"gallery/{Database}") />
                                    </div>
                                    <div class="col"></div>
                                </div>

                                                <div class="row flex-lg-column">
                                                    <div class="col-md"></div>
                                                    <div class="col-sm">
                                                        <h5 class="d-inline">@Title</h5>
                                                        @if (!string.IsNullOrEmpty(Credits))
                                                        {
                                        <span class="d-inline-block"><small>by @Credits</small></span>}
                                                        @if (!string.IsNullOrEmpty(Description))
                                                        {
                                        <div class="card-text" style="padding: 5px;">

                                            <p>@((MarkupString) Description)</p>

                                        </div>}
                                                        @if (!string.IsNullOrEmpty(Credits) || !string.IsNullOrEmpty(Copyrights))
                                                        {
                                        <div class="container">

                                            @if (!string.IsNullOrEmpty(Copyrights))
                                            {
                        <hr />
                                                <div class="row">
                                                    <div class="col"><small class="text-muted">@Copyrights</small></div>
                                                </div>}

                                        </div>}
                                                    </div>
                                                    <div class="col-md"></div>
                                                </div>}

@code { [Parameter] public string Key { get; set; }
    [Parameter] public string Database { get; set; }

    string Image { get; set; }
    string Description { get; set; }
    string Title { get; set; }
    string GalleryTitle { get; set; }
    string Credits { get; set; }
    string Copyrights { get; set; }
    string AlertMessage { get; set; }
    bool DisplayAlert { get; set; }
    bool isReady { get; set; } = false;

    bool IsDarkMode => localStorage.GetItem<bool>("darkmode");
    string DarkModeCss => IsDarkMode ? Themes.DarkCards : Themes.Light;

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            var gallery = await Http.GetFromJsonAsync<GalleryTwoModel>(SiteHelper.JsonCDN($"gallery/{Database}"));
            GalleryTitle = gallery.Title;
            foreach (var art in gallery.Artwork)
            {
                if (Key == art.Key)
                {
                    Image = art.Image;
                    Title = art.Title;
                    Credits = art.Credits;
                    Copyrights = art.Copyrights;


                    if (!string.IsNullOrEmpty(art.Description))
                        Description = SiteHelper.MarkdownToHtml(art.Description);

                    isReady = true;
                }
            }
        }
        catch (Exception err)
        {
            AlertMessage = err.Message;
            DisplayAlert = true;
        }
    } }
