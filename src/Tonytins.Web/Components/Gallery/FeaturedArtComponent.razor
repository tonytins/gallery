@using Tonytins.Models
@using System.Collections.Generic
@inject HttpClient Http
@inject Blazored.LocalStorage.ISyncLocalStorageService localStorage
<AlertComponent Display=@DisplayAlert Alert=@AlertType.Warning Message=@AlertMessage />
@if (!string.IsNullOrEmpty(PageName))
{
<h3>@PageName</h3>}
    @if (!IsReady)
    {
<LoadingComponent /> }
else
{
<div class="card-columns">
    @foreach (var art in art)
    {
        var permalink = @$"{Database}/{art.Key}";
<GalleryComponent Image=@SiteHelper.ImageCDN(art.Image, $@"gallery/{Database}")
                  Permalink=@permalink
                  Copyrights=@art.Copyrights
                  Credits=@art.Credits />}
</div>}
@code {
    IEnumerable<ArtworkModel> art;

    [Parameter] public string Database { get; set; }
    [Parameter] public int Iter { get; set; } = 3;

    MarkupString PageDescription { get; set; }
    string PageName { get; set; }
    string AlertMessage { get; set; }
    bool DisplayAlert { get; set; }
    bool IsReady { get; set; }

    bool IsDarkMode => localStorage.GetItem<bool>("darkmode");
    string DarkModeBadgeCss => IsDarkMode ? "badge-secondary" : "badge-primary";

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            var rng = new Random();

            var gallery = await Http.GetFromJsonAsync<GalleryModel>(SiteHelper.JsonCDN(Database, @"prod/gallery/"));

            PageName = gallery.Title;

            var galArray = gallery.Artwork.ToArray();

            art = gallery.Artwork
             .OrderBy(x => rng.Next(galArray.Length))
             .Take(Iter)
             .AsParallel();

            IsReady = true;

        }
        catch (Exception err)
        {
            AlertMessage = err.Message;
            DisplayAlert = true;
        }
    } }
